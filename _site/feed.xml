<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Welcome to Zixuan's Blog</title>
    <description>Be an excellent and happy Reader, Hiphop Dancer, and Software Engineer!</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 12 Sep 2021 10:46:10 +0800</pubDate>
    <lastBuildDate>Sun, 12 Sep 2021 10:46:10 +0800</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>freestyle 技巧学习</title>
        <description>&lt;p&gt;看了b站上两个关于freestyle技巧的小视频，觉得很不错，简单做个笔记回顾一下～&lt;/p&gt;

&lt;h3 id=&quot;关键词&quot;&gt;关键词&lt;/h3&gt;

&lt;p&gt;variation, energy, vitality, imagination&lt;/p&gt;

&lt;h3 id=&quot;变换方法&quot;&gt;变换方法&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;方向：前，后，左，右，左前，左后，右前，右后&lt;/li&gt;
  &lt;li&gt;高低：踮脚，站立，弯腰，下蹲&lt;/li&gt;
  &lt;li&gt;快慢：快，慢&lt;/li&gt;
  &lt;li&gt;移动：跳跃，旋转，滑动，走路&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;isolation节奏变化&quot;&gt;Isolation节奏变化&lt;/h3&gt;

&lt;p&gt;isolation部位：头，肩，胸，胯&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;普通isolation（哒～哒～哒～哒）&lt;/li&gt;
  &lt;li&gt;double isolation（哒～哒， 哒～哒～， 哒～哒～， 哒～哒～）&lt;/li&gt;
  &lt;li&gt;faster isolation（哒哒，哒哒，哒哒，哒哒）&lt;/li&gt;
  &lt;li&gt;break it isolation（蹦～～哒！蹦～～哒）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;发力方式变化&quot;&gt;发力方式变化&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;stop：想象骤停&lt;/li&gt;
  &lt;li&gt;echo：想象撞上一面墙&lt;/li&gt;
  &lt;li&gt;strobo：连续电流？&lt;/li&gt;
  &lt;li&gt;silence：身体在快速撞击后放松的感觉&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;fix-point技巧&quot;&gt;Fix point技巧&lt;/h3&gt;

&lt;p&gt;空间想象，用身体（头，胸，手臂，胯，膝盖，脚）比划：数字，形状，字母，汉字等，可以用身体固定部位画，也可以用各个部位组合着画，比如Z， 用头部划—，用手臂划/，再用臀部划—。&lt;/p&gt;

&lt;h3 id=&quot;ref&quot;&gt;Ref&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1H7411Z7xd&quot;&gt;https://www.bilibili.com/video/BV1H7411Z7xd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1kK4y1W7MS&quot;&gt;https://www.bilibili.com/video/BV1kK4y1W7MS&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Sep 2021 10:33:00 +0800</pubDate>
        <link>/%E8%A1%97%E8%88%9E/2021/09/12/freestyle-tricks.html</link>
        <guid isPermaLink="true">/%E8%A1%97%E8%88%9E/2021/09/12/freestyle-tricks.html</guid>
        
        <category>hiphop,</category>
        
        <category>freestyle</category>
        
        
        <category>街舞</category>
        
      </item>
    
      <item>
        <title>《Show your work!》读书笔记</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/show_3D_wo_shadow-1-768x861.jpeg&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;figcaption&gt;&lt;a href=&quot;https://austinkleon.com/show-your-work&quot;&gt;https://austinkleon.com/show-your-work&lt;/a&gt;&lt;/figcaption&gt; 
&lt;/figure&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;This book is after author’s another book “Steal like an artist”, which talks about how to steal from others. Instead, it talks about how to influence others by letting them steal from you.&lt;/p&gt;

&lt;h2 id=&quot;the-book-in-3-sentences&quot;&gt;The book in 3 sentences&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;You don’t have to be a genius for sharing, unless you switch the mind about what’s the point of sharing.&lt;/li&gt;
  &lt;li&gt;Sharing make you findable，and clue you with those who share your obsessions.&lt;/li&gt;
  &lt;li&gt;Before being an interesting person, be interested.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;some-impressive-points&quot;&gt;Some impressive points&lt;/h2&gt;

&lt;p&gt;Why do we need sharing?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;By generously sharing their ideas and their knowledge, they often gain an audience that they can then leverage when they need it-for fellowship, feedback, or patronage.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Creativity is always, in some sense, a collaboration, the result of a mind connected to other minds.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Being a valuable part of a scenius is not necessarily about how smart or talent you are, but about what you have to contribute-the ideas you share. If we forget about genius and think more about how we can nurture and contribute to a scenius, we can adjust our own expectations and the expectations of the worlds we want to accept us. We can stop asking what others can do for us, and start asking what we can do for others.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The problem with hoarding is you end up living off your reserves. Eventually, you’ll become state. If you give away everything you have, you are left with nothing. This forces you to look, to be aware, to replenish… Somehow the more you give away, the more comes back to you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;About documentation:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Whether you share it or not, documenting and recording your process as you go along has its own rewards: You’ll start to see the work you’re doing more clearly and feel like you’re making progress. And when you’re ready to share, you’ll have a surplus of material to choose from.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Why stories matters?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Stories are such a powerful driver of emotional value that their effect on any given object’s subjective value can actually be measured objectively.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Personal stories can make the complex more tangible, spark associations, and offer entry into things that might otherwise leave one cold.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;About being interesting:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To be “interest-ing” is to be curious and attentive, and to practice “the continual projection of interest.” To put it more simply: if you want to be interesting, you have to be interested.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Make stuff you love and talk about stuff you love and you’ll attract people who love that kind of stuff.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;take-actions&quot;&gt;Take actions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Be good enough:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep passion and be interested.&lt;/p&gt;

&lt;p&gt;Be attentive.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Be findable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Form the habit of taking records:&lt;/p&gt;

&lt;p&gt;learn to record to clarify, conclude and retrospect.&lt;/p&gt;

&lt;p&gt;Run my blog:&lt;/p&gt;

&lt;p&gt;Be brave to share who you are, what you think, and what you learn.&lt;/p&gt;

&lt;p&gt;Be sensible to feedbacks&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Sep 2021 23:44:00 +0800</pubDate>
        <link>/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/09/11/Show-your-work!-book-review.html</link>
        <guid isPermaLink="true">/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/09/11/Show-your-work!-book-review.html</guid>
        
        <category>book</category>
        
        <category>review</category>
        
        
        <category>读书笔记</category>
        
      </item>
    
      <item>
        <title>shell脚本学习-基础1</title>
        <description>&lt;h2 id=&quot;1-脚本组成&quot;&gt;1. 脚本组成&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;声明解释器:
#!/bin/bash&lt;/li&gt;
  &lt;li&gt;注释 &lt;br /&gt;
单行注释：#&lt;br /&gt;
多行注释：
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;sh&quot;&gt;&amp;lt;&amp;lt;COMMENT
  …
  COMMENT
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;« 后面可以是任意字符串，但前面使用什么关键词，结束注释也必须使用相同的关键词。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-脚本的执行&quot;&gt;2. 脚本的执行&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;启动子进程执行脚本：&lt;br /&gt;
bash test.sh&lt;br /&gt;
sh test.sh&lt;br /&gt;
./test.sh  (脚本有执行权限)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;不启动子进程，在当前进程执行脚本：&lt;br /&gt;
source test.sh&lt;br /&gt;
. test.sh  （注意.后面的空格）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-脚本输入与输出&quot;&gt;3. 脚本输入与输出&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;echo “string”&lt;br /&gt;
echo -e 支持转义字符&lt;br /&gt;
\n 换行&lt;br /&gt;
\033 or \e 色湖之终端属性如字体颜色，背景颜色，定位光标等&lt;br /&gt;
例如：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &quot;\033[1mOK\033[0m]&quot;
 \033[1m 表示让终端显示字符串，\033[0m关闭属性设置
 其他属性：
 4m加下划线
 5m闪烁
 30m黑色…
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;printf格式化输出数据&lt;/li&gt;
  &lt;li&gt;read输入
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;read 选项 变量名
  选项：
  -p 显示提示信息
  -t 设置读入数据超时时间
  -s slilent，不显示标准输入内容
  -n+number: 近读取n个字符
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-重定向&quot;&gt;4. 重定向&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;输出&lt;/p&gt;

    &lt;p&gt;&amp;gt; or 1&amp;gt;：标准输出重定向到文件(覆盖)
  2&amp;gt;: 错误输出重定向到文件（覆盖）
  （1/2）»: 表示追加 
  &lt;strong&gt;如果文件不存在&lt;/strong&gt;，&lt;strong&gt;会自动创建文件&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&amp;amp;&amp;gt; or &amp;amp;»: 标准输出和错误输出都重定向到一个文件
  2&amp;gt;&amp;amp;1: 错误重定向到标准正确输出
  1&amp;gt;&amp;amp;2:标准正确输出重定向到错误输出&lt;/p&gt;

    &lt;p&gt;将错误输出和标准输出都重定向到文件的另一种方法：
  &amp;gt; filename 2&amp;gt;&amp;amp;1&lt;/p&gt;

    &lt;p&gt;特殊文件：
  &amp;gt; /dev/null 数据一旦导入黑洞将无法找回&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;输入：
  &amp;lt;: 使用文件重定向输入
  «: 将数据内容重定向传递给前面的一个命令，作为命令的输入&lt;br /&gt;
  例如：&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  cat &amp;gt; /tmp/test.txt  &amp;lt;&amp;lt; HERE
  该文件未测试文件
  测试完成，记得将文件删除
  HERE
  # 将数据内容传给cat，再通过输出重定向将数据导出到文件的例子。
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5-各种引号的使用&quot;&gt;5. 各种引号的使用&lt;/h2&gt;
&lt;p&gt;“ ”和‘ ’都可以用来引用一个整体，&lt;strong&gt;但是只有单引号可以屏蔽特殊符号&lt;/strong&gt;&lt;br /&gt;
` `：反引号，命令替换符，将命令的输出结果替代命令&lt;br /&gt;
eg:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;tar -czf /root/log-`date +%Y%m%d`.tar.gz /var/log&lt;br /&gt;
echo “当前系统账号登陆数量 `who | wc -l` “&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;6-变量&quot;&gt;6. 变量：&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;linux中有哪些变量？&lt;br /&gt;
a. 用户自定义变量&lt;br /&gt;
b. 系统预设变量：环境变量，位置变量，预定义变量，自定义变量&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一些常见系统预设变量：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;变量名&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;UID&lt;/td&gt;
      &lt;td&gt;当前账户的账户ID&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;USER&lt;/td&gt;
      &lt;td&gt;当前账户的账户名称&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HISTSIZE&lt;/td&gt;
      &lt;td&gt;当前终端的最大历史命令条目数量&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HOME&lt;/td&gt;
      &lt;td&gt;当前帐户根目录&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LANG&lt;/td&gt;
      &lt;td&gt;当前环境使用语言&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PATH&lt;/td&gt;
      &lt;td&gt;命令搜索路径&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PWD&lt;/td&gt;
      &lt;td&gt;当前工作目录&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RANDOM&lt;/td&gt;
      &lt;td&gt;随即返回0-32767的整数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$0&lt;/td&gt;
      &lt;td&gt;返回当前命令名称&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$n&lt;/td&gt;
      &lt;td&gt;返回位置参数，如$1第一个位置参数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$#&lt;/td&gt;
      &lt;td&gt;命令参数个数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$*&lt;/td&gt;
      &lt;td&gt;命令行的所有参数，所有参数作为一个整体&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$@&lt;/td&gt;
      &lt;td&gt;命令行的所有参数，所有参数作为独立个体&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$?&lt;/td&gt;
      &lt;td&gt;上一条命令退出时状态代码&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$$&lt;/td&gt;
      &lt;td&gt;当前进程的进程号&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$!&lt;/td&gt;
      &lt;td&gt;最后一个后台进程的进程号&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;7-数据过滤与正则表达式&quot;&gt;7. 数据过滤与正则表达式：&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grep:
-i 忽略大小写
-v 去反匹配
-w 匹配单词
-q 静默匹配
-rn recursive and output line number
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;基本正则表达式：&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字符&lt;/th&gt;
      &lt;th&gt;含义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;c&lt;/td&gt;
      &lt;td&gt;匹配字母c&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;.&lt;/td&gt;
      &lt;td&gt;匹配任意单个字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;*&lt;/td&gt;
      &lt;td&gt;匹配前一个字符出现零次或多次&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;.*&lt;/td&gt;
      &lt;td&gt;匹配多个任意字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[ ]&lt;/td&gt;
      &lt;td&gt;匹配集合中的任意单个字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[x-y]&lt;/td&gt;
      &lt;td&gt;匹配连续的字符串范围，范围内的任意字符都可以&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;^&lt;/td&gt;
      &lt;td&gt;匹配字符串的开头&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$&lt;/td&gt;
      &lt;td&gt;匹配字符串的结尾&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[^]&lt;/td&gt;
      &lt;td&gt;匹配否定，对括号中的集合取反&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\&lt;/td&gt;
      &lt;td&gt;匹配转义后的字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\{n, m\}&lt;/td&gt;
      &lt;td&gt;匹配前一个字符重复n到m次&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\{n, \}&lt;/td&gt;
      &lt;td&gt;匹配前一个字符重复至少n次&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(n\)&lt;/td&gt;
      &lt;td&gt;匹配前一个字符重复n次&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\( \)&lt;/td&gt;
      &lt;td&gt;将(与)之间的内容存储在保留空间，最多可存储9个&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\n&lt;/td&gt;
      &lt;td&gt;通过\1至\9调用保留空间中的内容&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;几种常用用法：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grep &lt;span class=&quot;s2&quot;&gt;&quot;^$&quot;&lt;/span&gt; file	匹配文件的空白行
grep “^#”file	匹配注释行
grep &lt;span class=&quot;s2&quot;&gt;&quot;00*&quot;&lt;/span&gt; file	
grep &lt;span class=&quot;s2&quot;&gt;&quot;[0-9]&quot;&lt;/span&gt; file	
grep &lt;span class=&quot;s2&quot;&gt;&quot;sbin/[^n]&quot;&lt;/span&gt; file	
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;扩展正则表达式：&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字符&lt;/th&gt;
      &lt;th&gt;含义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;{n,m}&lt;/td&gt;
      &lt;td&gt;等同于基本正则表达式\{n,m\}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;+&lt;/td&gt;
      &lt;td&gt;匹配前的字符出现一次或多次&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;?&lt;/td&gt;
      &lt;td&gt;匹配前的字符出现零次或一次&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;|&lt;/td&gt;
      &lt;td&gt;匹配逻辑或，匹配|前或后的字符串&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;( )&lt;/td&gt;
      &lt;td&gt;匹配正则集合，等同于基本正则表达式的\(\)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;必须使用grep -E或者egrep使用&lt;/p&gt;

&lt;h2 id=&quot;8-算术运算&quot;&gt;8. 算术运算：&lt;/h2&gt;
&lt;p&gt;一些基本运算符号&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;++， –， +， -， /, %， **（求幂）， &amp;amp;&amp;amp;， ||&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;bash中采用的计算方式如下：
$( ( ) )  (注意空格), $[ ]
let：使用变量名时，不需要在变量名前面添加$，默认不会输出运算结果，一般将运算结果赋值给变量
这两种方式只支持整数的四则运算，如果要进行小数的运算需要用到bc计算器&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料：&lt;/h2&gt;
&lt;p&gt;《Linux Shell核心编程指南》张明一&lt;/p&gt;

</description>
        <pubDate>Sat, 24 Apr 2021 13:50:00 +0800</pubDate>
        <link>/shell/2021/04/24/03-shell-learning-notes.html</link>
        <guid isPermaLink="true">/shell/2021/04/24/03-shell-learning-notes.html</guid>
        
        <category>shell</category>
        
        
        <category>shell</category>
        
      </item>
    
      <item>
        <title>CSS Tricks: 给背景图片增加透明度</title>
        <description>&lt;p&gt;想给自己的网站背景图片设置透明度，加以美化，google到一个简单的方法：&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;#content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url(image.png)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;background-blend-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Only one div needed&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;background-blend-mode&quot;&gt;background-blend-mode:&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;The background-blend-mode CSS property sets how an element’s background images should blend with each other and with the element’s background color.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;value&lt;/strong&gt;： normal(default), multiply, screen, overlay, darken, lighten, color-dodge, saturation, color, luminosity&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.w3schools.com/cssref/pr_background-blend-mode.asp&quot;&gt; More detailed descriptions of each value&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ref&quot;&gt;Ref:&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/12605908/change-background-image-opacity&quot;&gt;Stack Overflow：Change background image opcacity&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.w3schools.com/cssref/pr_background-blend-mode.asp&quot;&gt; W3schools description of background-blend-mode&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 03 Feb 2021 11:50:00 +0800</pubDate>
        <link>/css/2021/02/03/02-css-tricks.html</link>
        <guid isPermaLink="true">/css/2021/02/03/02-css-tricks.html</guid>
        
        <category>CSS，前端，设计</category>
        
        
        <category>CSS</category>
        
      </item>
    
      <item>
        <title>2020年度小结</title>
        <description>&lt;figure&gt;
&lt;img src=&quot;/images/RBG.jpg&quot; alt=&quot;2020年的女神RBG(Ruth Bader Ginsburg)&quot; /&gt;
&lt;figcaption&gt;RBG(Ruth Bader Ginsburg)&lt;/figcaption&gt; 
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;
今天是2021年的一月底，离咱们的传统节日春节还有十多天。下午，公司刚刚举办了线上年会，一个小时的时间，领导讲话，抽奖环节，刷刷的过了。对于抽奖本就不抱任何希望的我，看完，淡定地关掉视频链接，感叹：疫情之下，真是风一样的年会呀。&lt;/p&gt;

&lt;p&gt;今年算是正式步入社会完整的第一年，也是依旧平淡的一年。反观自己身上，没有太多惊喜，但是也有那么几个关键词。&lt;/p&gt;

&lt;h2 id=&quot;街舞&quot;&gt;街舞&lt;/h2&gt;
&lt;p&gt;我是从去年三月份（因为疫情在家隔离了两个月）回上海之后开始学习街舞的，上的课时目前累计下来约六十多节了，学跳舞初期，我在家附近的舞蹈室尝试了多个舞种，有Jazz，现代舞，hiphop，肚皮舞…，最后发现hiphop最能hit我！之后的时间就专注在hiphop的练习上。工作忙碌的时候一周上一到两次，不忙的时候大概一周三次的样子。虽然现在依然属于和老师学基本功的初学者，但学习街舞之后，我发现了自己身上的一些转变：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;变得更大方&lt;/strong&gt;。我一直对自己的肢体协调能力和乐感比较满意，但是只有在跳hiphop的时候，这种强烈的律动和随性的感觉，让我觉得出奇地享受和畅快。其实大部分时候我是比较害羞和偏内敛的，而跳hiphop的时候，我好像释放了天性，成为一个完全不一样的，洒脱的，酷酷的的自己。虽然相比其他人，我依然算害羞的哈哈哈，但比起过去那个总是放不开的我，现在的我更能够大大方方地享受自己喜欢的事物，不论人前还是人后。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;变壮了（TT）&lt;/strong&gt;。有喜欢的运动，就会不自觉地加强运动的频次。我发现我的肩膀明显变宽了，除了身体素质变得好一些，食欲也大幅提升，以至于之前基本在95斤徘徊的我，现在基本上在100斤左右了，不知是该哭还是该笑…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;更有活力和更加乐观&lt;/strong&gt;。喜欢的音乐和运动会带来好心情，会积聚更加强大的精神力量，从而会提供更多应对困难和低落的勇气和韧性。有音乐的陪伴，我会更加享受一个人走在路上的感觉，再伤心的事，我也依然有让自己快乐的能力。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;创造与分享的欲望提升&lt;/strong&gt;。上课其实更多是属于一个被动接受的过程，跟着老师练习一下基本功，然后学习一个routine，课下如果不去复习和加强巩固，进步其实会非常缓慢。我开始思考，我应该怎么样自己练习，才能进步更快，于是我给自己定了一些目标，比如自己将所学到的元素组合起来练习，以及自己去扒一些喜欢的舞蹈。而回想在上学的时候，我只会想着向跳得好的同学学动作。如果有一天，我能很惬意地freestyle出一段我自己也比较满意的舞蹈，我会非常开(de)心(yi)。&lt;/p&gt;

&lt;p&gt;有一点我认为自己非常需要克服的就是，太过于追求完美和别人的赞扬，以至于放弃了大量练习的机会。比如，我觉得自己的舞跳的不够完美，所以会放弃再和老师多录一次舞的机会；比如，对于博客，我觉得网上肯定有类似的大量写的比我更好的内容，所以我更愿意记录在自己的私人笔记本里。先认清和接纳不完美的自己（非常重要，很多时候别人的反馈能纠正自我认知的偏差），然后基于这个不完美的自己，一步步努力提高。&lt;/p&gt;

&lt;h2 id=&quot;疫情爆痘&quot;&gt;疫情爆痘&lt;/h2&gt;
&lt;p&gt;去年夏天的时候，因为化妆戴口罩，闷出了很多闭口，然后找了家乡那边的老中医开药，吃药的过程中，痘痘爆发了，我也陷入了这一年最大的焦虑和低落里。后来换了西药，皮肤渐渐稳定下来，现在只剩下一些难消的痘印。回顾自己过去的战痘经历，我改变了自己的饮食习惯，了解了很多皮肤护理的知识，也渐渐变得坦然和接纳自己。每当我变得焦虑不自信的时候，我会用纪录片&lt;a href=&quot;https://movie.douban.com/photos/photo/2559039892/&quot;&gt;《女大法官金斯伯格》&lt;/a&gt;里面这样一句话告诫自己：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Don’t be overcome by useless emotions.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;同时，让我没有想到的是，以往积累的经验和知识，还帮助到了另一个深受痘痘困扰的同事，和她交流的时候，发现自己能帮到别人，真的会很有成就感。同时，当你看到自己的皮肤渐渐变好，发现自己其实也是很清秀的女孩，以及不管是生活习惯还是了解的相关知识的收获，仿佛长痘痘这事，就是一个坎，目的是为了我变得更加坚强乐观。同时我还有两点别的感想：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;遇到问题，需要自己了解一些专业的知识，来更科学地解决问题，以及避免被忽悠。但是毕竟术业有专攻，当发现很难自己解决问题或者需要花很大的时间精力解决问题时，要寻求专业人士（注意鉴别）的帮助，疑难杂症看医生的时候复诊很重要，保持病情的更新。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;有时候脸上长了痘痘，不好意思被人看到的时候，与其遮遮掩掩但还是避免不了被关心问候而觉得难过，不如大大方方地笑着和对方讲，我最近爆痘了好严重啊，然后坦然地继续后面的话题，这个时候心里的负担其实会小很多，因为你就不会总想着他/她看起来是不是在想我脸上的痘太严重了，从而陷入莫名的压力和焦虑中。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;工作&quot;&gt;工作&lt;/h2&gt;
&lt;p&gt;我觉得对于工作，拥有责任感非常重要，但是热情或者说兴趣可能更为难得。只有对工作保持热情，才会不需要那么痛苦地消耗珍贵的自制力而仅能维持正常的工作产出，因为热情才会促成强烈的求知欲，专注，追求完美，和不懈地探索，工作上的成果简直就是水到渠成，乐意为之。&lt;/p&gt;

&lt;p&gt;我一直把工作和学习看得非常重要。对我自己而言，我可能没法抱有工作和生活完全分开的态度。我觉着，工作占据了人生多大的比例啊，如果我花了这么多时间在一个我既不喜欢又没有多少成就感的工作上面（这里暂且不讨论喜欢和成就感的关联），为的仅仅是满足我的生活开销，我该会觉得多么痛苦啊。&lt;/p&gt;

&lt;p&gt;在本科的时候，我一直没有体现出多大的对于编程的兴趣或天赋，我学的是EE，但是学好专业课于我而言仅仅是取得好的学分绩，让之后的路走得更顺利一点而已，我并没有多大的课程兴趣或者说专业见解，我喜欢上的课程都是什么体育课，英语课，还有一些文科院系的选修课，可以说是非常不务正业了。稀里糊涂抱有侥幸心理地保研了，然后随着实验室同学的大流，找C++后台开发的岗位，苦战了一段时间，幸运找到了一家互联网大厂的C++后台开发实习岗位，去的部门非常好，但是因为能力不够没有留下来。现在在一家外企做软件开发工程师。开发的工作非常底层，公司的氛围很好，同事们也都很好，但是工作的内容对我来说有些枯燥。&lt;/p&gt;

&lt;p&gt;回顾了自己这两段工作经历，我时常会想也许编程本身不适合我，也许早就应该在本科的时候换喜欢的社会学专业，但是这种想法并没有什么意义，路已经走得很远了，回头的代价太大，我既缺乏底气，也没有资本。心里的涟漪很快恢复平静，又投入到日常平淡又麻木的工作里。直到我看到了&lt;a href=&quot;http://zhangwenli.com/blog/&quot;&gt;羡辙&lt;/a&gt;小姐姐的网站。我看到另一种可能性，看到了自己向往的生活，看到了我们身上的相似点，以及很多我尚且不足的地方，但是就像当初那个想要学好hiphop的想法生根发芽一样，我觉得，也许我可以成为一个前端工程师，去设计和开发好看的网站或界面，去做有意思的app。&lt;/p&gt;

&lt;p&gt;也许比起在现在的部门一直做firmware开发，很努力很费地去学习那些我并不太十分感兴趣的技术知识，也许我可以选择学习那些我更感兴趣和更想掌握的知识和技能，我可以去主动的选择自己更喜欢的工作和生活。&lt;/p&gt;

&lt;p&gt;我也喜欢阅读，只是我现在的阅读总是围着某一个目的去阅读，需要去除这多余的功利和囫囵吞枣。&lt;/p&gt;

&lt;p&gt;我也很喜欢好看的颜色好看的设计和排版，我很愿意学习这方面的知识。&lt;/p&gt;

&lt;p&gt;我很乐意去学习需要实现更好看更有趣更简洁易用的东西的技能，我很欣赏技术。&lt;/p&gt;

&lt;p&gt;我也对心理学哲学比较感兴趣，因为各式各样的人总是引发我的兴趣。&lt;/p&gt;

&lt;p&gt;我很勤奋，自学能力也还不错。&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;我深知过去那种根深蒂固为了竞争而充分激发学习动力和能力的那套机制，现在已经失去吸引力和效力了，我想从被动的做事变成主动的做事，主动地去学习，去思考，去选择，去感受和创造。&lt;/p&gt;

&lt;p&gt;换工作可能会经历阵痛，改变的时刻最好是十年前和现在（好像俗套了哈哈）。有时候截然相反的人生道理都能走通，重点在于你如何走，重要的是行动。&lt;/p&gt;

&lt;h2 id=&quot;2021-plan&quot;&gt;2021 PLAN：&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;七八月份换一份前端开发的工作&lt;/li&gt;
  &lt;li&gt;主题读书计划：前端与设计相关：8本（想到今年可能比较忙，所以不要定太高的要求），生成读书报告&lt;/li&gt;
  &lt;li&gt;经营好的我个人网站&lt;/li&gt;
  &lt;li&gt;学会hiphop freestyle&lt;/li&gt;
  &lt;li&gt;每个季度扒一只喜欢的舞蹈，做成视频上传。&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 29 Jan 2021 14:50:00 +0800</pubDate>
        <link>/%E9%9A%8F%E7%AC%94/2021/01/29/2020-annual-retrospect.html</link>
        <guid isPermaLink="true">/%E9%9A%8F%E7%AC%94/2021/01/29/2020-annual-retrospect.html</guid>
        
        <category>随笔，小结</category>
        
        
        <category>随笔</category>
        
      </item>
    
      <item>
        <title>Git学习笔记-基础1</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#概述&quot; id=&quot;markdown-toc-概述&quot;&gt;概述&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#git的特点&quot; id=&quot;markdown-toc-git的特点&quot;&gt;Git的特点&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#git的四个工作区域&quot; id=&quot;markdown-toc-git的四个工作区域&quot;&gt;Git的四个工作区域&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#git文件的几种状态&quot; id=&quot;markdown-toc-git文件的几种状态&quot;&gt;Git文件的几种状态&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#git常用指令&quot; id=&quot;markdown-toc-git常用指令&quot;&gt;git常用指令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ref&quot; id=&quot;markdown-toc-ref&quot;&gt;Ref&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;概述&quot;&gt;概述&lt;/h2&gt;

&lt;p&gt;Git是一种分布式版本控制系统，在分布式版本控制系统中，客户端并不只提取最新版本的文件快照，而是将整个代码仓库完整的镜像下来。&lt;/p&gt;

&lt;h2 id=&quot;git的特点&quot;&gt;Git的特点&lt;/h2&gt;

&lt;p&gt;直接记录快照，而非差异比较&lt;/p&gt;

&lt;p&gt;近乎所有操作都是本地执行&lt;/p&gt;

&lt;p&gt;基于计算校验和保证数据完整性&lt;/p&gt;

&lt;h2 id=&quot;git的四个工作区域&quot;&gt;Git的四个工作区域&lt;/h2&gt;

&lt;p&gt;工作目录（workbench）：自己电脑中能看到的目录&lt;/p&gt;

&lt;p&gt;暂存区（stage/index）：一般存放在.git目录下的index文件（.git/index），所有暂存区有时候也叫索引&lt;/p&gt;

&lt;p&gt;版本库（repository）：Git的版本库.git, 用来保存项目的元数据和对象数据库的地方，是Git中最重要的部分&lt;/p&gt;

&lt;p&gt;远程仓库（remote directory）：远程仓库，托管代码的服务器&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190709155928130.png?x-oss-
process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTIzNDg2OTI=,size_16,color_FFFFFF,t_70&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190709154820432.png?x-oss-
process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTIzNDg2OTI=,size_16,color_FFFFFF,t_70&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;git文件的几种状态&quot;&gt;Git文件的几种状态&lt;/h2&gt;

&lt;p&gt;未跟踪（untracked）：此文件在文件夹中，但没有加入到git库，不参与版本控制，通过git add状态变为staged&lt;/p&gt;

&lt;p&gt;未修改（unmodify）：文件已经入库，未修改，如果使用git rm 移出版本库，则成为untracked文件&lt;/p&gt;

&lt;p&gt;已修改（modified）：修改了文件，但还没保存在数据库中，通过git add进入暂存状态，使用git
checkout则丢弃修改，返回到unmodify状态&lt;/p&gt;

&lt;p&gt;已暂存（staged）：对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中，执行git
commit则同步到库中，这是库中的文件和本地文件又变为一致，未见为unmodify状态&lt;/p&gt;

&lt;p&gt;已提交（committed）：数据已经安全保存在本地数据库中&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2019070915483142.png?x-oss-
process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTIzNDg2OTI=,size_16,color_FFFFFF,t_70&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;git常用指令&quot;&gt;git常用指令&lt;/h2&gt;

&lt;p&gt;Git config –list 给出所有配置指令&lt;/p&gt;

&lt;p&gt;Git init 在现有目录中初始化仓库&lt;/p&gt;

&lt;p&gt;Git clone 【url】 文件夹名 克隆现有仓库&lt;/p&gt;

&lt;p&gt;Git status 查看当前文件状态（-s 状态简览）为暂存和已经暂存&lt;/p&gt;

&lt;p&gt;Git add file 跟踪新文件，以及暂存新的修改&lt;/p&gt;

&lt;p&gt;Git diff 显示尚未暂存的改动&lt;/p&gt;

&lt;p&gt;Git commit -m “提交信息” 提交更新&lt;/p&gt;

&lt;p&gt;Git commit -a 跳过使用暂存区域，即git会自动把所有已经跟踪过的文件暂存起来一并提交。&lt;/p&gt;

&lt;p&gt;Git rm file 移除文件（从暂存区删除），该文件不再纳入版本管理&lt;/p&gt;

&lt;p&gt;Git mv file_from file_to 移动文件&lt;/p&gt;

&lt;p&gt;Git log 显示提交历史&lt;/p&gt;

&lt;p&gt;Git remote -v 显示所有的远程仓库（-v会现实需要读写远程仓库使用的git保存的简写及其对应的URL）&lt;/p&gt;

&lt;p&gt;Git fetch 【remote-name】&lt;/p&gt;

&lt;p&gt;Git push origin master 推送到远程仓库&lt;/p&gt;

&lt;p&gt;Git config –global alias.co checkout 给checkout取别名为co&lt;/p&gt;

&lt;h2 id=&quot;ref&quot;&gt;Ref&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6&quot;&gt;https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 09 Jul 2019 15:49:12 +0800</pubDate>
        <link>/git/2019/07/09/Git-learning-notes-(1).html</link>
        <guid isPermaLink="true">/git/2019/07/09/Git-learning-notes-(1).html</guid>
        
        <category>Git</category>
        
        
        <category>Git</category>
        
      </item>
    
      <item>
        <title>字符编码那些事儿</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#为什么要有字符编码&quot; id=&quot;markdown-toc-为什么要有字符编码&quot;&gt;为什么要有字符编码？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#为什么会有多种编码方式&quot; id=&quot;markdown-toc-为什么会有多种编码方式&quot;&gt;为什么会有多种编码方式？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#为什么会出现乱码&quot; id=&quot;markdown-toc-为什么会出现乱码&quot;&gt;为什么会出现乱码？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ref&quot; id=&quot;markdown-toc-ref&quot;&gt;Ref&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unicode， ASCII， UTF-8，GB2312……这些到底是什么？为什么vim打开编辑文档出现乱码？怎么修改字符编码之后就解决了？&lt;/p&gt;

&lt;p&gt;很多与文档编辑有关的软件，也总是涉及到设置字符编码的选项？应该怎么设置？&lt;/p&gt;

&lt;p&gt;让我们带着疑问一步一步拨云见日。&lt;/p&gt;

&lt;h2 id=&quot;为什么要有字符编码&quot;&gt;为什么要有字符编码？&lt;/h2&gt;

&lt;p&gt;计算机系统中所有信息以二进制形式存储，因此为了将我们日常所用的字符转化为计算机内部的信息，需要通过字符编码将这些字符转化为二进制码。那么这里涉及到两个概念：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;字符集&lt;/strong&gt; ：字符集就是用十进制来表示各种字符的集合。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;字符编码&lt;/strong&gt; ：将字符转化为二进制编码的规则。&lt;/p&gt;

&lt;h2 id=&quot;为什么会有多种编码方式&quot;&gt;为什么会有多种编码方式？&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;ASCII&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最早，ASCII（American standard Code for information
Interchange）作为美国人发明的字符编码方式，其字符集包括128个字符（0-127号），由8位二进制表示，其中最前面一位统一规定为0，后7位用来表示这些字符。比如‘A’在字符集中是65，表示为二进制是01000001。&lt;/p&gt;

&lt;p&gt;但后来当世界各地都开始用计算机时他们的字母里很多是ASCII里面没有，因此将ASCII码中127号之后的空位来表示这些新字符，因此从128-255这一页字符集被称为扩展字符集。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GB2312&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;等到中国人使用计算机后，发现完全没有中文字符啊，怎么办？于是中国人提出的字符编码方案为 &lt;strong&gt;GB2312&lt;/strong&gt;
，相当于对ASCII的扩展。小于等于127号的继续使用，并且用2个大于127的字节表示一个中文字符，前面的一个字节（他称之为&lt;code class=&quot;highlighter-rouge&quot;&gt;高字节&lt;/code&gt;）从0xA1用到
0xF7，后面一个字节（&lt;code class=&quot;highlighter-rouge&quot;&gt;低字节&lt;/code&gt;）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。在这些编码中，还把数学符号，罗马希腊的字母，日文的假名都编进去了，连ASCII里本来就有的数字，标点，字母都统统重新编了两个字节长的编码，这就是常说的“
&lt;strong&gt;全角&lt;/strong&gt; ”字符，而原有的127号以下的那些字符称为“ &lt;strong&gt;半角&lt;/strong&gt; ”。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GBK&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但是中文还是不够用，很多冷门生僻字和繁体字等还是无法识别怎么办？于是要求高字节大于127的就认为是2字节的中文字符，这样结果脱战之后就是GBK标准。GBK相比GB2312，增加了近20000个新汉字与符号。但后来少数民族同胞也要用计算机，于是为了扩展少数民族字符，GBK被扩展为GB18030。这些编码标准统称为DBCS（Double
Byte Character Set，双字节字符集）。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Unicode与UTF-8/UTF-16&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为了方便全世界的文化交流，满足跨语言、跨平台文本转换、处理需求，ISO(国际标准化组织)决定制定一个统一的包括全世界所有字符的编码标准，包括字符集、编码方案等，他们打算叫他”Universal
Multiple-Octet Coded Chracter Set”，简称UCS，俗称Unicode。&lt;/p&gt;

&lt;p&gt;在Unicode中，直接规定必须用两个字节，ASCII那些半角字符，保持原编码不变，只是将其长度由原来的8位扩展为16位（高8位全为0），而其他文化和语言的字符则全部重新统一编码。&lt;/p&gt;

&lt;p&gt;问题是：（1）计算机怎么知道2个字节为一个字符，如何识别2个字节为一个字符？（2）半角字符如果用两个字节表示，很浪费空间，而计算机大部分内容还是英文。&lt;/p&gt;

&lt;p&gt;而作为Unicode字符集的一种编码方式，UTF-8采用变长编码，使用1-4个字节表示一个字符，其特点是，对不同范围的字符使用不同长度的编码。&lt;/p&gt;

&lt;p&gt;UTF-8的编码规则：&lt;/p&gt;

&lt;p&gt;（1）单字节符号，字节的第一位设为0，后面7位为这个符号的Unicode码。因此对于英文字母，UTF-8编码和ASCII码是相同的。&lt;/p&gt;

&lt;p&gt;（2）对于n字节的符号（n&amp;gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10，剩下的没有提及的二进制位，全为这个符号的unicode码。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20181105200347923.png?x-oss-
process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTIzNDg2OTI=,size_16,color_FFFFFF,t_70&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;类似的，UTF-16使用二字节或四字节表示一个字符的变长编码。&lt;/p&gt;

&lt;h2 id=&quot;为什么会出现乱码&quot;&gt;为什么会出现乱码？&lt;/h2&gt;

&lt;p&gt;编码方式不兼容会导致乱码，例如当一个文件采用编码A的方式编码，但按照编码B的方式解码，必然得到乱码。&lt;/p&gt;

&lt;h2 id=&quot;ref&quot;&gt;Ref&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://juejin.im/entry/59434c3161ff4b006cd280a1&quot;&gt;（1）&lt;/a&gt;&lt;a href=&quot;https://juejin.im/entry/59434c3161ff4b006cd280a1&quot;&gt;ASCII，Unicode 和 UTF-8
的故事&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html&quot;&gt;（2）&lt;/a&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html&quot;&gt;字符编码笔记：ASCII，Unicode
和 UTF-8&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 05 Nov 2018 20:09:36 +0800</pubDate>
        <link>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/2018/11/05/A-character-encoding-those-things.html</link>
        <guid isPermaLink="true">/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/2018/11/05/A-character-encoding-those-things.html</guid>
        
        <category>计算机基础</category>
        
        
        <category>计算机基础</category>
        
      </item>
    
      <item>
        <title>strcpy/strlen/strcat/strcmp的实现</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1字符串拷贝函数strcpy&quot; id=&quot;markdown-toc-1字符串拷贝函数strcpy&quot;&gt;1.字符串拷贝函数strcpy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2字符串长度strlen&quot; id=&quot;markdown-toc-2字符串长度strlen&quot;&gt;2.字符串长度strlen&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3字符串拼接strcat&quot; id=&quot;markdown-toc-3字符串拼接strcat&quot;&gt;3.字符串拼接strcat&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4字符串比较strcmp&quot; id=&quot;markdown-toc-4字符串比较strcmp&quot;&gt;4.字符串比较strcmp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ref&quot; id=&quot;markdown-toc-ref&quot;&gt;Ref&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;刷到一道题：写出完整版的strcpy函数&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img src=&quot;/images/The realization of strcpystrlenstrcatSTRCMP_1.png&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;索性对相关函数进行一下整理：&lt;/p&gt;

&lt;h2 id=&quot;1字符串拷贝函数strcpy&quot;&gt;1.字符串拷贝函数strcpy&lt;/h2&gt;

&lt;p&gt;函数strcpy的原型是char* strcpy(char* des , const char* src)，des 和 src 所指内存区域不可以重叠且
des 必须有足够的空间来容纳 src 的字符串。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;cassert&amp;gt;       //assert的定义
#include&amp;lt;cstddef&amp;gt;       //NULL的定义
char * strcpy(char * strDst, const char * strSrc)
{
    assert((strDst != NULL) &amp;amp;&amp;amp; (strSrc != NULL));
    char * address = strDst;
    while ((*strDst++ = *strSrc++) != 0);
    return address;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;要点：&lt;br /&gt;
1. strcpy在执行字符串的复制或追加过程中，不执行溢出检查&lt;br /&gt;
2. strcpy会拷贝’\0’，且在拷贝的过程中根据’\0’判断是否停止拷贝&lt;br /&gt;
3. 注意编程风格，变量的命名要规范&lt;br /&gt;
4. 源指针所指的字符串不能修改，应该声明为const&lt;br /&gt;
5. 要判断一下源指针与目的指针为空的情况，思维要严谨，这里使用assert&lt;br /&gt;
6. 需要使用临时变量保存目的字符串的地址，并返回该地址&lt;br /&gt;
7. 函数返回char *的目的是为了支持链式表达式，即strcpy可以作为其他函数的实参。&lt;/p&gt;

&lt;h2 id=&quot;2字符串长度strlen&quot;&gt;2.字符串长度strlen&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;cassert&amp;gt;
#include&amp;lt;cstddef&amp;gt;
size_t strlen(char * str)
{
    assert(str != NULL);
    size_t len = 0;
    while ((*str++) != '\0')len++;
    return len;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;3字符串拼接strcat&quot;&gt;3.字符串拼接strcat&lt;/h2&gt;

&lt;p&gt;函数strcat的原型是char* strcat(char* des, char* src)，des 和 src 所指内存区域不可以重叠且 des
必须有足够的空间来容纳 src 的字符串。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;cassert&amp;gt;
#include&amp;lt;cstddef&amp;gt;
char * strcat(char * strDst, const char * strSrc)
{
    assert((strDst != NULL) &amp;amp;&amp;amp; (strSrc != NULL));
    char *address = strDst;
    while (*strDst != '\0')strDst++;
    while ((*strDst++ = *strSrc++) != '\0');
    return address;

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;4字符串比较strcmp&quot;&gt;4.字符串比较strcmp&lt;/h2&gt;

&lt;p&gt;函数strcmp的原型是int strcmp(const char *s1,const char *s2)。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;若s1==s2，返回零；&lt;/li&gt;
  &lt;li&gt;若s1&amp;gt;s2，返回正数；&lt;/li&gt;
  &lt;li&gt;若s1&amp;lt;s2，返回负数。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;即：两个字符串自左向右逐个字符相比（按ASCII值大小相比较），直到出现不同的字符或遇\0为止。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;cassert&amp;gt;
#include&amp;lt;cstddef&amp;gt;
int strcmp(const char * str1, const char * str2)
{
    assert((str1 != NULL) &amp;amp;&amp;amp; (str2 != NULL));
    while (*str1 == *str2)
    {
        if (*str1 == '\0')
            return 0;
        ++str1;
        ++str2;
    }
    return *str1 - *str2;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;ref&quot;&gt;Ref&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://songlee24.github.io/2015/03/15/string-operating-function/&quot;&gt;https://songlee24.github.io/2015/03/15/string-operating-function/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Jan 2018 16:18:32 +0800</pubDate>
        <link>/c/c++/2018/01/15/The-realization-of-strcpystrlenstrcatSTRCMP.html</link>
        <guid isPermaLink="true">/c/c++/2018/01/15/The-realization-of-strcpystrlenstrcatSTRCMP.html</guid>
        
        <category>C/C++</category>
        
        
        <category>C/C++</category>
        
      </item>
    
      <item>
        <title>typedef与函数指针</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#typedef&quot; id=&quot;markdown-toc-typedef&quot;&gt;&lt;strong&gt;typedef&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#decltype类型指示符&quot; id=&quot;markdown-toc-decltype类型指示符&quot;&gt;&lt;strong&gt;decltype类型指示符&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#函数指针&quot; id=&quot;markdown-toc-函数指针&quot;&gt;&lt;strong&gt;函数指针&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;typedef&quot;&gt;&lt;strong&gt;typedef&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;利用typedef声明一个新的类型名的方法是：&lt;/p&gt;

&lt;!-- more --&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 先按定义变量的方法写出定义语句（如int i;）。
2. 将变量名换成新类型名（如将i换成COUNT）。
3.   在最前面加typedef(如typedef int COUNT)。
4. 然后可以用新类型名去定义变量。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以声明上述的数组类型为例来说明：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 先按定义数组形式书写： int n[100];
2. 将变量名n换成自己指定的类型名：int NUM[100];
3. 在前面加上typedef，得到 typedef int NUM[100];
4. 用来定义变量： NUM n;(n是包含100个整型元素的数组)。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;关于typedef的几点说明：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. typedef可以声明各种类型名，但不能用来定义变量。用typedef可以声明数组类型、字符串类型，使用比较方便。
2. 用typedef只是对已经存在的类型增加一个类型名，而没有创造新的类型。
3. 当在不同源文件中用到同一类型数据（尤其是像数组、指针、结构体、共用体等类型数据）时，常用typedef声明一些数据类型，把它们单独放在一个头文件中，然后在需要用到它们的文件中用＃include命令把它们包含进来，以提高编程效率。
4. 使用typedef有利于程序的通用与移植。有时程序会依赖于硬件特性，用typedef便于移植。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;来自 &lt;a href=&quot;http://c.biancheng.net/cpp/biancheng/view/180.html&quot;&gt;http://c.biancheng.net/cpp/biancheng/view/180.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;decltype类型指示符&quot;&gt;&lt;strong&gt;decltype类型指示符&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;选择并返回操作数的数据类型，在此过程中，编译器分析表达式并得到它的类型，却不实际计算表达式的值。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;decltype(f()) sum=x;
const int ci=0, &amp;amp;cj=ci;
decltype(ci) x=0;   //x类型为const int
decltype(cj) y=x;  //y的类型是const int&amp;amp;，y绑定到变量x
decltype(cj) z;      //错误：z是一个引用，必须初始化
int i=42, *p=&amp;amp;i；
decltype(*p) c;  //错误，c是int&amp;amp;，必须初始化
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果表达式的内容是解引用操作，则decltype将得到引用类型。解引用指针可以得到指针所指的对象，而且还能给这个对象赋值，因此，decltype（*p）的结果类型就是int&amp;amp;，而非int。&lt;/p&gt;

&lt;h3 id=&quot;函数指针&quot;&gt;&lt;strong&gt;函数指针&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;函数指针指向的是函数而非对象，要想声明一个指向函数的指针，只需要用指针替换函数名即可：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bool lengthCompare(const string&amp;amp;, const string&amp;amp;)
bool (*pf)(const string&amp;amp;, const string&amp;amp;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;pf指向的函数参数是两个conststring的引用，返回类型是bool类型&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用函数指针&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用函数名时，函数自动转换为指针：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pf=lengthCompare;
pf=&amp;amp;lengthCompare;  //两者等价，取址符可选
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;此外也可以直接使用指向函数的指针调用该函数，无需提前解引用指针：&lt;/p&gt;

&lt;p&gt;以下三种表达等价&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bool b1=pf(&quot;hello&quot;, &quot;goodbye&quot;);
bool b2=(*pf)(&quot;hello&quot;, &quot;goodbye&quot;);
bool b3= lengthCompare(&quot;hello&quot;, &quot;goodbye&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Pf=0；或者pf=nullptr；表示pf不指向任何函数。&lt;/p&gt;

&lt;p&gt;通过指针类型决定选用函数时，指针类型必须与函数中的参数类型，返回类型精确匹配。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;函数指针形参&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;虽然不能定义函数类型的形参，但是形参可以是指向函数的指针。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void useBigger(const string &amp;amp;s1,const string &amp;amp;s2, bool(*pf)(const string &amp;amp;, const string &amp;amp;));
void useBigger(const string &amp;amp;s1, const string &amp;amp;s2, boolpf(const string &amp;amp;, const string &amp;amp;));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;将函数名作为实参使用，自动转换为指针&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;useBigger(s1, s2, lengthCompare);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用typedef与decltype简化表达：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//Func Func2是函数类型
typedef bool Func(const string &amp;amp;, const string &amp;amp;);
typedef decltype(lengthCompare) Func2;

//FuncP,FuncP2是指向函数的指针
typedef bool (*FuncP)(const string &amp;amp;, const string &amp;amp;)；
typedef decltype(lengthCompare) *FuncP2；
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;useBigger的等价声明：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void useBigger(const string &amp;amp;s1, const string &amp;amp;s2, Func);
void useBigger(const string &amp;amp;s1, const string &amp;amp;s2, FuncP2));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;第一条中，编译器自动将Func表示的函数类型转换为指针。&lt;/p&gt;

&lt;p&gt;返回指向函数的指针：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;using F=int（int*，int);   //F是函数类型，不是指针
using PF=int(*)(int*,int);  //PF是指针类型
F *f1(int);
PF *f1(int);
//等价于：
int (*f1(int))(int *,int);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Wed, 03 Jan 2018 15:50:55 +0800</pubDate>
        <link>/c/c++/2018/01/03/Typedef-with-a-function-pointer.html</link>
        <guid isPermaLink="true">/c/c++/2018/01/03/Typedef-with-a-function-pointer.html</guid>
        
        <category>C/C++</category>
        
        
        <category>C/C++</category>
        
      </item>
    
      <item>
        <title>一小段C++程序反映出的问题</title>
        <description>
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!-- more --&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;

using namespace std;

class A{
public:
	A(int n){ value = n; }
	A(const A&amp;amp; other){ value = other.value; }		
	//直接调用other的私有成员，这是因为访问权限针对的是类而不是对象，所以在同一个类中，还是可以直接访问私有成员变量的
	//注意拷贝构造函数的参数不能定义为A(A other)因为这样的话相当于传值，形参复制到实参就会调用拷贝函数，因此会在拷贝构造函数内调用拷贝构造函数，形成无休止的
	//递归调用而导致栈溢出。
	void print(){ cout &amp;lt;&amp;lt; value &amp;lt;&amp;lt; endl; }
private:
	int value;
};



void main(){
	A a = 10;	//复制初始化，首先调用构造函数A(int n)函数创建一个临时对象，然后调用拷贝构造函数，把这个临时对象作为参数，构造对象a
	A b = a;	//复制初始化，因为a本就存在，所以直接调用拷贝构造函数，构造对象b
	b.print();
	system(&quot;PAUSE&quot;);
	return;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里涉及到的问题：&lt;/p&gt;

&lt;p&gt;构造函数的参数设置&lt;/p&gt;

&lt;p&gt;成员变量的访问权限是针对类而不是对象而言&lt;/p&gt;

&lt;p&gt;构造函数的调用&lt;/p&gt;

</description>
        <pubDate>Sun, 31 Dec 2017 12:02:07 +0800</pubDate>
        <link>/c/c++/2017/12/31/A-small-piece-of-c-+-+-program-reflects-the-problem.html</link>
        <guid isPermaLink="true">/c/c++/2017/12/31/A-small-piece-of-c-+-+-program-reflects-the-problem.html</guid>
        
        <category>C/C++</category>
        
        
        <category>C/C++</category>
        
      </item>
    
  </channel>
</rss>
